# This is a basic workflow to help you get started with Actions

env:
  projectName: ${{ projectName }} #Change label with name
  environment: dev

name: Pipeline CI/CD

# Controls when the action will run.
on:
  # Triggers the workflow on push event
  push:
    branches:
      - develop
      - 'release/**'
      - master

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      CONFIG_SERVER_URI: ${{secrets.CONFIG_SERVER_URI}}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: JDK 11 setup
        uses: actions/setup-java@v1
        with:
          java-version: 11

      # compiled code, test and package it in its distributable format
      - name: compile code, test and package it in its distributable format
        env:
          GITHUB_USENAME: ${{github.actor}}
          GITHUB_PASSWORD: ${{secrets.GH_PACKAGE_REPO_PASSWORD}}
        run: mvn -B -Pgithub clean package --settings devops/settings.xml
  deploy:
    needs:
      - build
    runs-on: ubuntu-latest
    env:
      CONFIG_SERVER_URI: ${{secrets.CONFIG_SERVER_URI}}
    steps:
      - uses: actions/checkout@v2

      - name: JDK 11 setup
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Run the tests
        env:
          GITHUB_USENAME: ${{github.actor}}
          GITHUB_PASSWORD: ${{secrets.GH_PACKAGE_REPO_PASSWORD}}
        run: mvn -B -Dmaven.test.skip=true clean package -Pgithub --settings devops/settings.xml

      - name: Get the version
        id: get_version
        uses: battila7/get-version-action@v2

      - name: Build the docker image to dev
        if: contains(github.ref, 'refs/heads/feature/') || github.ref == 'refs/heads/develop'
        run: docker build -f devops/Dockerfile --build-arg P_CONFIG_SERVER_URI=${{env.CONFIG_SERVER_URI}} --build-arg P_PROFILE=dev --build-arg P_PORT=${{env.DEV_PORT}} -t ${{ env.projectName }} .

      - name: Build the docker image to Staging
        if: contains(github.ref, 'refs/heads/release/')
        run: docker build -f devops/Dockerfile --build-arg P_CONFIG_SERVER_URI=${{env.CONFIG_SERVER_URI}} --build-arg P_PROFILE=stg --build-arg P_PORT=${{env.DEV_PORT}} -t ${{ env.projectName }} .

      - name: Build the docker image to Production
        if: github.ref == 'refs/heads/master'
        run: docker build -f devops/Dockerfile --build-arg P_CONFIG_SERVER_URI=${{env.CONFIG_SERVER_URI}} --build-arg P_PROFILE=prod --build-arg P_PORT=${{env.DEV_PORT}} -t ${{ env.projectName }} .

      - name: Configure AWS credentials to dev
        if: contains(github.ref, 'refs/heads/feature/') || github.ref == 'refs/heads/develop'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.DEV_AWS_SECRET_REGION }}

      - name: Configure AWS credentials to Staging
        if: contains(github.ref, 'refs/heads/release/')
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.STG_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.STG_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.STG_AWS_SECRET_REGION }}

      - name: Configure AWS credentials to Production
        if: github.ref == 'refs/heads/master'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.PROD_AWS_SECRET_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push image (dev) to Amazon ECR
        if: contains(github.ref, 'refs/heads/feature/') || github.ref == 'refs/heads/develop'
        id: build-image-dev
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.DEV_AWS_ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ steps.get_version.outputs.version }}-${{ github.run_number }}
        run: |
          docker tag ${{ env.projectName }}:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Push image (Staging) to Amazon ECR
        if: contains(github.ref, 'refs/heads/release/')
        id: build-image-stg
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.STG_AWS_ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ steps.get_version.outputs.version }} + '-'+ ${{ github.run_id }}
        run: |
          docker tag ${{ env.projectName }}:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Push image (Production) to Amazon ECR
        if: github.ref == 'refs/heads/master'
        id: build-image-prod
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.PROD_AWS_ECR_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ steps.get_version.outputs.version }} + '-'+ ${{ github.run_id }}
        run: |
          docker tag ${{ env.projectName }}:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Download task definition (dev)
        if: contains(github.ref, 'refs/heads/feature/') || github.ref == 'refs/heads/develop'
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.DEV_AWS_ECR_REPOSITORY_NAME }}-task \
          --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition (dev)
        if: contains(github.ref, 'refs/heads/feature/') || github.ref == 'refs/heads/develop'
        id: task-def-dev
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ secrets.DEV_AWS_ECR_REPOSITORY_NAME }}
          image: ${{ steps.build-image-dev.outputs.image }}

      - name: Fill in the new image ID in the Amazon ECS task definition (Staging)
        if: contains(github.ref, 'refs/heads/release/')
        id: task-def-stg
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: application
          image: ${{ steps.build-image-stg.outputs.image }}

      - name: Deploy Amazon ECS task definition (dev)
        if: contains(github.ref, 'refs/heads/feature/') || github.ref == 'refs/heads/develop'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-dev.outputs.task-definition }}
          service: ${{ secrets.DEV_ECS_SERVICE }}
          cluster: ${{ secrets.DEV_ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Deploy Amazon ECS task definition (Staging)
        if: contains(github.ref, 'refs/heads/release/')
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-stg.outputs.task-definition }}
          service: ${{ secrets.STG_ECS_SERVICE }}
          cluster: ${{ secrets.STG_ECS_CLUSTER }}
          wait-for-service-stability: true
